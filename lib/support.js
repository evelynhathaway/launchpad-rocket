/*
	Module: Device support
	Description: Support methods, object of device classes generated by the support methods
	TODO: Use ES6 modules' export default for support and not devices
*/
/*
	Devices object
*/
const devices = {};


/*
	Support manipulation
*/
const support = {
	// Add supported device configurations
	add(name, data) {
		devices[name] = data;

		// Method chaining
		return this;
	},
	// Remove supported device configurations
	remove(name) {
		if (devices[name]) {
			delete devices[name];
		}

		// Method chaining
		return this;
	},


	// is object instanceof device?
	is(object, name) {
		return object instanceof devices[name];
	},


	// Run the regex for the supported devices, getting the first capture group
	/*
		Example:
			From: "3- Launchpad MK2" (not a key in `devices`, from port names)
			To: "Launchpad MK2" (is a key, from the device's class's regex getter's first capture group)
	*/
	getMatchingKey(name) {
		const match = name.match(this.regex);

		if (match) {
			// Return either the first capture group in the match (in case of regex) or the match (in case of string or regex without a first capture group)
			return match[1] || match;
		} else {
			throw new Error(`Your device, ${name}, is not supported.`);
		}
	},


	get regex() {
		// Get all names, or regex strings that get a name
		const names = [];
		for (const key in devices) {
			if (devices[key].regex) {
				names.push(devices[key].regex);
			} else {
				names.push(devices[key].type);
			}
		}

		// Generate and return regex from above
		return new RegExp(`^(?:${names.join(")|(?:")})$`, "i");
	}
};


// Export
module.exports = {devices, support};
